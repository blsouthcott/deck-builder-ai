import os
import re
import logging

from flask import Flask, request
from flask_cors import CORS
from flask_restful import Api, Resource
import openai

from pptx import Presentation
from io import BytesIO
from base64 import b64encode


openai.api_key = os.getenv("OPENAI_API_KEY")
MODEL = "gpt-3.5-turbo"
TEMPERATURE = 0.5

# defaults if not in request body
TOPIC_COUNT = 5
SLIDE_COUNT = 10
CHARACTER_LIMIT = 300


logging.basicConfig(level=logging.DEBUG)


def get_chat_completion(prompt, model=MODEL, temperature=TEMPERATURE):

    resp = openai.ChatCompletion.create(
        model=model,
        messages=[{
            "role": "user",
            "content": prompt
        }],
        temperature=temperature
    )

    return resp["choices"][0]["message"]["content"]


class PresentationIdeas(Resource):

    def post(self):
        body = request.get_json()

        previous_topics = body.get("previousTopics")

        if not (topic_count := body.get("topicCount")):
            topic_count = TOPIC_COUNT

        prompt = f"Generate a list of {topic_count} different topic ideas for a PowerPoint presentation. Put each topic on a new line and keep it concise. Do not include any of the following topics:{previous_topics}" if previous_topics else f"Generate a list of {topic_count} different topic ideas for a PowerPoint presentation. Put each topic on a new line and keep it concise."
        resp_content = get_chat_completion(prompt)
        topics = resp_content.split("\n")
        for i in range(len(topics)):
            topics[i] = re.sub("\d+\.?\s*", "", topics[i]).strip('"').strip("-")
        previous_topics += "\n- " + "\n- ".join(topics)

        logging.debug(f"Here are the topics: {topics}")
        return {"topics": topics, "previousTopics": previous_topics}, 200


class SlideDeck(Resource):

    def post(self):
        body = request.get_json()

        # collecting data from chatgpt
        if not (topic := body.get("topic")):
            return "Presentation topic is required. Please include a 'topic' field in the request body", 400
        
        slide_count = body.get("slide_count")
        character_limit = body.get("character_limit")
        
        # prompt = f'You are an expert on the topic of "{topic}". You are currently writing the content for a PowerPoint presentation on that topic. Start by writing down a clever title for your presentation. Follow that with {slide_count if slide_count else SLIDE_COUNT} slides_info that go from Introduction to Conclusion in a logical order. Each slide must have a Title and Content. Try to use full but very concise sentences for the content. Organize the content into lists. You must not let any slide go over {character_limit if character_limit else CHARACTER_LIMIT} characters in length. Do not add anything before or after the presentation.'
        prompt = f'''You are an expert on the topic of "{topic}". Generate the content for a PowerPoint presentation on that topic. The following text, enclosed in ", is the format for a complete presentation that is 3 slides long. Parts that you should fill out start with [ and end with ].\n"\nPresentation Title: [catchy title for your presentation]\nSlide 1\nTitle: [catchy title for Slide 1 (cannot be the word 'Introduction')]\nContent:\n[bulleted list of points for Slide 1] (use full but very concise sentences)\nSlide 2\nTitle: [catchy title for Slide 2]\nContent:\n[bulleted list of points for Slide 2] (use full but very concise sentences)\nSlide 3\nTitle: [clever title for Slide 3 (cannot be the word 'Conclusion')]\nContent:\n[bulleted list of points for Slide 3] (use full but very concise sentences)\n"\nUse this format to create exactly {slide_count if slide_count else SLIDE_COUNT} slides, which should include a conclusive final slide. The slide content must not exceed {character_limit if character_limit else CHARACTER_LIMIT}. Do not add anything before or after the presentation.'''
        resp_content = get_chat_completion(prompt)
        logging.debug("This is the response: ", resp_content)
        response_content_lines = resp_content.split("\n")

        # organizing the data generated by chatgpt
        slides_info = []
        current_slide = 0
        for line in response_content_lines[3:]:
            if line[:7] == "Title: ":
                slides_info.append({"title": line[7:], "content": []})
                current_slide += 1
            elif line[:1] == "-":
                slides_info[current_slide - 1]["content"].append(line[2:])

        # setting up the presentation
        presentation = Presentation()
        title_slide_layout = presentation.slide_layouts[0]
        bullet_slide_layout = presentation.slide_layouts[1]

        # setting up the title slide
        slide = presentation.slides.add_slide(title_slide_layout)
        title_shape = slide.shapes.title
        title_shape.text = resp_content[20:resp_content.find("\n")].strip('"').strip(
            "'")  # strips quotation marks because the ai sometimes likes to add them to the titles
        title_shape.text_frame.paragraphs[0].font.name = custom_font
        title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(custom_font_color[0], custom_font_color[1], custom_font_color[2])
        fill = slide.background.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor(custom_background_color[0], custom_background_color[1], custom_background_color[2])

        # setting up the other slides
        for slide_info in slides_info:
            slide = presentation.slides.add_slide(bullet_slide_layout)
            slide.placeholders[1].left = Pt(36.0)  # resets the slide body's left position to the default
            slide.placeholders[1].top = Pt(150.0)  # sets the slide body's top position 24 points below the default, which is 126 points
            fill = slide.background.fill
            fill.solid()
            fill.fore_color.rgb = RGBColor(custom_background_color[0], custom_background_color[1], custom_background_color[2])
            title_shape = slide.shapes.title
            title_shape.text = slide_info["title"]  # adds the slide's title
            title_shape.text_frame.paragraphs[0].font.name = custom_font  # changes the font for the slide's title
            title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(custom_font_color[0], custom_font_color[1], custom_font_color[2])  # changes the text color for the slide's title

            try:
                # adds the bullet points
                for i in range(len(slide_info["content"])):
                    if i == 0:
                        bullet_text_frame = slide.shapes.placeholders[1].text_frame
                        bullet_text_frame.text = slide_info["content"][0]
                    else:
                        paragraph = bullet_text_frame.add_paragraph()
                        paragraph.text = slide_info["content"][i]
                        paragraph.level = 0
                        paragraph.space_before = Pt(15)
                    bullet_text_frame.paragraphs[i].font.name = custom_font
                    bullet_text_frame.paragraphs[i].font.color.rgb = RGBColor(custom_font_color[0], custom_font_color[1], custom_font_color[2])
            except IndexError:
                pass  # TODO: update to handle cases where the API gets the formatting wrong

        # finally saves the finished pptx file
        pres_bytes = BytesIO()
        presentation.save(pres_bytes)
        pres_bytestring = b64encode(pres_bytes.getvalue()).decode()

        return {"byteString": pres_bytestring}, 200


def create_app():
    app = Flask(__name__)
    CORS(app, origins=os.environ["ALLOWED_HOSTS"])
    app.config["SECRET_KEY"] = os.environ["SECRET_KEY"]
    return app


app = create_app()
api = Api(app)
api.add_resource(PresentationIdeas, "/api/topics")
api.add_resource(SlideDeck, "/api/slideDeck")


if __name__ == "__main__":
    app.run()
    